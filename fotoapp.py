# -*- coding: utf-8 -*-
"""fotoapp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rilZf3wdFYcPOh9Tdi8argOBPG4pmOvW
"""

from google.colab import drive
drive.mount('/content/drive')

from PIL import Image, ImageFilter

import cv2

from skimage import io, color, exposure, data, img_as_ubyte, transform
from skimage.color import rgb2gray, rgba2rgb
from skimage.feature import canny
from skimage.transform import resize, hough_ellipse
from skimage.draw import ellipse_perimeter

import matplotlib.pyplot as plt

import numpy as np

def fotosredes(url,red):
  dimensiones = {'facebook':(1200,630),'twitter':(1024,512),'instagram':(1080,1080),'youtube':(1280,720)}

  if red not in dimensiones:
    print("Plataforma no soportada. Use: 'Youtube', 'Instagram', 'Twitter' o 'Facebook'.")
  else:
    try:
      img = Image.open(url)
    except FileNotFoundError:
      print("La imagen no se encuentra en la ruta especificada.")
      return

    escala_ancho = dimensiones[red][0] / img.size[0]
    escala_alto = dimensiones[red][1] / img.size[1]
    escala_final = min(escala_ancho, escala_alto)

    resize_img = img.resize((round(img.size[0] * escala_final),round(img.size[1] * escala_final)))

    return resize_img

def ajustaconstraste(url):
  img = io.imread(url)

  img_ecu = exposure.equalize_hist(img)

  fig, axes = plt.subplots(1, 2, figsize=(8, 4))

  ax = axes.ravel()

  ax[0].imshow(img, cmap=plt.cm.gray)
  ax[0].set_title("Original")

  ax[1].imshow(img_ecu, cmap=plt.cm.gray)
  ax[1].set_title("Ecualizada")

  plt.savefig("comparacion_contraste.png")

  io.imsave("imagen_contraste_ecualizada.png", (img_ecu * 255).astype("uint8"))

  plt.show()

def filtros(url,filtro):
  filtros = {
      'blur': ImageFilter.BLUR,
      'contour': ImageFilter.CONTOUR,
      'detail': ImageFilter.DETAIL,
      'edge_enhance': ImageFilter.EDGE_ENHANCE,
      'edge_enhance_more': ImageFilter.EDGE_ENHANCE_MORE,
      'emboss': ImageFilter.EMBOSS,
      'find edges': ImageFilter.FIND_EDGES,
      'sharpen': ImageFilter.SHARPEN,
      'smooth': ImageFilter.SMOOTH
      }

  if filtro not in filtros:
    print("Filtro no soportado. Use: 'blur', 'contour', 'detail', 'edge_enhance', 'edge_enhance_more', 'emboss', 'find edges', 'sharpen' o 'smooth'.")
    return

  img = Image.open(url)

  img = img.convert('RGB')

  img_filtro = img.filter(filtros[filtro])

  fig, axs = plt.subplots(1, 1, figsize=(12, 6))

  axs.imshow(img_filtro)
  axs.set_title("Foto resultante")
  axs.axis("off")

  img_filtro.save("imagen_filtro_resultado.png")

  plt.show()

  fig, axs = plt.subplots(4, 3, figsize=(15, 12))

  axs[0, 0].imshow(img)
  axs[0, 0].set_title("Imagen Original")
  axs[0, 0].axis("off")

  for i, (nombre_filtro, filtro_recorrido) in enumerate(filtros.items()):
    img_filtrada = img.filter(filtro_recorrido)

    ax = axs[(i+1) // 3, (i+1) % 3]
    ax.imshow(img_filtrada)

    if nombre_filtro == filtro:
      ax.set_title(nombre_filtro, color='red')
    else:
      ax.set_title(nombre_filtro)

    ax.axis("off")

  plt.tight_layout()
  plt.savefig("filtros_aplicados_completo.png", dpi=300)
  plt.show()

def boceto(url,persona=True):
  if persona:
    img = io.imread(url)

    if img.shape[-1] == 4:
        gris = color.rgb2gray(img)
    elif len(img.shape) == 3:
        gris = color.rgb2gray(img)
    else:
        gris = img

    bordes = canny(gris, sigma=1.0, low_threshold=0.3, high_threshold=0.5)

    fig2, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, figsize=(8, 4), sharex=True, sharey=True)

    ax1.set_title('Imagen original')
    ax1.imshow(img)

    ax2.set_title('Boceto')
    ax2.imshow(bordes, cmap='gray')

    plt.savefig("boceto.png")

    plt.show()
  else:
    print("La imagen ingresada no es una persona.")
    return